from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import random

# === –¢–í–û–ô –¢–û–ö–ï–ù –∏ WebApp URL ===
import os
TOKEN = os.getenv("BOT_TOKEN")

WEBAPP_URL = "https://telegram-fireduel.vercel.app"

CHOICES = ["–ö–∞–º–µ–Ω—å ü™®", "–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è", "–ë—É–º–∞–≥–∞ üìÑ"]

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ WebApp", web_app=WebAppInfo(url=WEBAPP_URL))],
        [InlineKeyboardButton("ü§ñ –ò–≥—Ä–∞—Ç—å –≤ Telegram", callback_data="tg_play")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å:",
        reply_markup=reply_markup
    )

# === –ö–æ–º–∞–Ω–¥–∞ /play (–¥–ª—è Telegram) ===
async def play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_choice_buttons(update.effective_chat.id, context)

# === –í—ã–±–æ—Ä Telegram-–≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ===
async def handle_tg_play_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await send_choice_buttons(query.message.chat_id, context)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –ö–∞–º–µ–Ω—å/–ù–æ–∂–Ω–∏—Ü—ã/–ë—É–º–∞–≥–∞ ===
async def send_choice_buttons(chat_id, context):
    keyboard = [
        [InlineKeyboardButton("–ö–∞–º–µ–Ω—å ü™®", callback_data="–ö–∞–º–µ–Ω—å ü™®")],
        [InlineKeyboardButton("–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è", callback_data="–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è")],
        [InlineKeyboardButton("–ë—É–º–∞–≥–∞ üìÑ", callback_data="–ë—É–º–∞–≥–∞ üìÑ")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ö–æ–¥:",
        reply_markup=reply_markup
    )

# === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã ===
def get_result(user, bot):
    if user == bot:
        return "ü§ù –ù–∏—á—å—è!"
    elif (user.startswith("–ö–∞–º–µ–Ω—å") and bot.startswith("–ù–æ–∂–Ω–∏—Ü—ã")) or \
         (user.startswith("–ù–æ–∂–Ω–∏—Ü—ã") and bot.startswith("–ë—É–º–∞–≥–∞")) or \
         (user.startswith("–ë—É–º–∞–≥–∞") and bot.startswith("–ö–∞–º–µ–Ω—å")):
        return "üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª!"
    else:
        return "ü§ñ –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!"

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ö–æ–¥–∞ ===
async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_choice = query.data
    bot_choice = random.choice(CHOICES)
    result = get_result(user_choice, bot_choice)

    keyboard = [
        [InlineKeyboardButton("üîÅ –ï—â—ë —Ä–∞—É–Ω–¥", callback_data="tg_play")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    response = (
        f"<b>–¢—ã –≤—ã–±—Ä–∞–ª:</b> {user_choice}\n"
        f"<b>–ë–æ—Ç –≤—ã–±—Ä–∞–ª:</b> {bot_choice}\n\n"
        f"<b>{result}</b>"
    )

    await query.edit_message_text(text=response, reply_markup=reply_markup, parse_mode="HTML")

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("play", play))

    app.add_handler(CallbackQueryHandler(handle_choice, pattern="^(–ö–∞–º–µ–Ω—å|–ù–æ–∂–Ω–∏—Ü—ã|–ë—É–º–∞–≥–∞).*"))
    app.add_handler(CallbackQueryHandler(handle_tg_play_button, pattern="^tg_play$"))

    app.run_polling()

if __name__ == "__main__":
    main()